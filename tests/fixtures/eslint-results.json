[
    {
        "filePath": "/home/runner/work/github-action/github-action/src/bin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "/home/runner/work/github-action/github-action/src/github-action.js",
        "messages": [
            {
                "ruleId": "lines-around-comment",
                "severity": 2,
                "message": "Expected line before comment.",
                "line": 30,
                "column": 5,
                "nodeType": "Line",
                "messageId": "before",
                "endLine": 30,
                "endColumn": 32,
                "fix": {
                    "range": [
                        939,
                        939
                    ],
                    "text": "\n"
                }
            },
            {
                "ruleId": "template-curly-spacing",
                "severity": 2,
                "message": "Unexpected space(s) after '${'.",
                "line": 34,
                "column": 26,
                "nodeType": null,
                "messageId": "unexpectedAfter",
                "fix": {
                    "range": [
                        1087,
                        1088
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "template-curly-spacing",
                "severity": 2,
                "message": "Unexpected space(s) before '}'.",
                "line": 34,
                "column": 38,
                "nodeType": null,
                "messageId": "unexpectedBefore",
                "fix": {
                    "range": [
                        1096,
                        1097
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "template-curly-spacing",
                "severity": 2,
                "message": "Unexpected space(s) after '${'.",
                "line": 34,
                "column": 40,
                "nodeType": null,
                "messageId": "unexpectedAfter",
                "fix": {
                    "range": [
                        1101,
                        1102
                    ],
                    "text": ""
                }
            },
            {
                "ruleId": "template-curly-spacing",
                "severity": 2,
                "message": "Unexpected space(s) before '}'.",
                "line": 34,
                "column": 55,
                "nodeType": null,
                "messageId": "unexpectedBefore",
                "fix": {
                    "range": [
                        1113,
                        1114
                    ],
                    "text": ""
                }
            }
        ],
        "errorCount": 5,
        "warningCount": 0,
        "fixableErrorCount": 5,
        "fixableWarningCount": 0,
        "source": "/**\n * @fileoverview File that GitHub runs as the GitHub Action.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\n/*\n * Important! This file must NOT require anything other than core Node.js\n * modules. This file will be executed directly from GitHub without `npm i`\n * being run and therefore must be completely self-contained.\n */\nconst cp = require(\"child_process\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\n//-----------------------------------------------------------------------------\n// Main\n//-----------------------------------------------------------------------------\n\n// get package version from package.json\nconst pkgFilename = path.resolve(__dirname, \"../package.json\");\nconst pkg = JSON.parse(fs.readFileSync(pkgFilename));\n\ntry {\n    // in dev mode, run locally\n    if (process.env.ESLINT_DRAFT) {\n        cp.execSync(\"node src/bin.js\");\n    } else {\n        cp.execSync(`npx ${ pkg.name }@${ pkg.version }`);\n    }\n} catch (ex) {\n    console.log(ex.output.toString());\n}\n"
    },
    {
        "filePath": "/home/runner/work/github-action/github-action/src/util.js",
        "messages": [
            {
                "ruleId": "require-jsdoc",
                "severity": 2,
                "message": "Missing JSDoc comment.",
                "line": 18,
                "column": 1,
                "nodeType": "FunctionDeclaration",
                "endLine": 20,
                "endColumn": 2
            },
            {
                "ruleId": "no-unused-vars",
                "severity": 2,
                "message": "'unusedFunction' is defined but never used.",
                "line": 18,
                "column": 10,
                "nodeType": "Identifier",
                "endLine": 18,
                "endColumn": 24
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "/**\n * @fileoverview Wrapper around @actions/exec\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst { exec } = require(\"@actions/exec\");\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\nfunction unusedFunction() {\n\n}\n\n/**\n * Wrapper around the exec() method from @actions/exec. Makes it easier to run\n * commands in the GitHub Action.\n * @param {string} command The command to run.\n * @param {string[]} [args] Optional arguments to pass.\n * @returns {Object} An object with`exitCode` and `output` properties.\n */\nexports.exec = function(command, ...args) {\n    let output = \"\";\n\n    const options = {\n        silent: true,\n        ignoreReturnCode: true,\n        listeners: {\n            stdout(data) {\n                output += data.toString();\n            }\n        }\n    };\n\n    return exec(command, args, options).then(exitCode => ({\n        exitCode,\n        output\n    }));\n};\n\n/**\n * Creates annotations based on the lint results.\n * @param {Array} lintResults An array of lint results from an ESLint run.\n * @param {string} baseDir The base directory to strip off of the file paths\n *      for each result.\n * @returns {Array} An array of GitHub annotations.\n */\nexports.createAnnotations = function(lintResults, baseDir) {\n\n    const annotations = [];\n\n    for (const result of lintResults) {\n        for (const message of result.messages) {\n            const annotation = {\n                path: result.filePath.slice(baseDir.length + 1),\n                start_line: message.line,\n                end_line: \"endLine\" in message ? message.endLine : message.line,\n                message: message.message,\n                annotation_level: message.severity === 2 ? \"failure\" : \"warning\",\n                title: message.ruleId\n            };\n\n            // GitHub only honors columns when start and end line are the same\n            if (message.line === message.endLine) {\n                annotation.start_column = message.column;\n                annotation.end_column = message.endColumn;\n            }\n\n            annotations.push(annotation);\n\n        }\n    }\n\n    return annotations;\n};\n\n/**\n * Creates a summary of the ESLint run.\n * @param {Array} lintResults An array of lint results from an ESLint run.\n * @returns {string} A description of the ESLint run results.\n */\nexports.createSummary = function(lintResults) {\n\n    let errors = 0;\n    let warnings = 0;\n\n    for (const result of lintResults) {\n        for (const message of result.messages) {\n            if (message.severity === 2) {\n                errors++;\n            } else {\n                warnings++;\n            }\n        }\n    }\n\n    return `${errors + warnings} problems (${errors} errors, ${warnings} warnings) found`;\n};\n"
    },
    {
        "filePath": "/home/runner/work/github-action/github-action/tests/index.test.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    }
]
